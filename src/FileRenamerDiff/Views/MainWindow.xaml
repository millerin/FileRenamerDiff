<metro:MetroWindow
   x:Class="FileRenamerDiff.Views.MainWindow"
   xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
   xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
   xmlns:behaviors="http://schemas.microsoft.com/xaml/behaviors"
   xmlns:diffplex="clr-namespace:DiffPlex.Wpf.Controls;assembly=DiffPlex.Wpf"
   xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
   xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
   xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls"
   xmlns:v="clr-namespace:FileRenamerDiff.Views"
   xmlns:vm="clr-namespace:FileRenamerDiff.ViewModels"
   Title="FILE RENAMER DIFF"
   Width="1920"
   Height="720"
   Background="{StaticResource MaterialDesignPaper}"
   BorderBrush="{StaticResource AccentColorBrush}"
   BorderThickness="1"
   FontFamily="Meiryo"
   FontWeight="Bold"
   GlowBrush="{StaticResource AccentColorBrush}"
   Icon="/FileRenamerDiff_icon.ico"
   TextElement.Foreground="{StaticResource MaterialDesignBody}"
   TitleCharacterCasing="Normal"
   WindowState="Maximized">
   <Window.DataContext>
      <vm:MainWindowViewModel />
   </Window.DataContext>

   <metro:MetroWindow.Resources>
      <l:VisibilityAndBooleanConverter x:Key="VisibilityCollapsedConverter" ConvertWhenFalse="Collapsed" />
      <l:VisibilityAndBooleanConverter
         x:Key="VisibilityCollapsedReverseConverter"
         ConvertWhenFalse="Visible"
         ConvertWhenTrue="Collapsed" />
      <v:DiffPaneModelToFlowDocumentConverter x:Key="DiffPaneModelToFlowDocumentConverter" />
      <Style BasedOn="{StaticResource MaterialDesignRichTextBox}" TargetType="RichTextBox">
         <Setter Property="IsReadOnly" Value="True" />
      </Style>
   </metro:MetroWindow.Resources>

   <behaviors:Interaction.Triggers>
      <!--  When ContentRendered event raised, Initialize method of ViewModel would be called.  -->
      <behaviors:EventTrigger EventName="ContentRendered">
         <l:LivetCallMethodAction MethodName="Initialize" MethodTarget="{Binding Mode=OneTime}" />
      </behaviors:EventTrigger>

      <!--  Dispose method is called, when Window closing.  -->
      <behaviors:EventTrigger EventName="Closed">
         <l:DataContextDisposeAction />
      </behaviors:EventTrigger>
   </behaviors:Interaction.Triggers>
   <!--  DataGridのヘッダーからBindingするために、名前付け  -->
   <Grid x:Name="rootObj">
      <Grid.RowDefinitions>
         <RowDefinition Height="Auto" />
         <RowDefinition />
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
         <ColumnDefinition Width="Auto" />
         <ColumnDefinition />
      </Grid.ColumnDefinitions>
      <materialDesign:ColorZone
         Grid.Row="0"
         Grid.ColumnSpan="2"
         Padding="8"
         CornerRadius="3"
         Mode="PrimaryDark">
         <StackPanel Orientation="Horizontal">
            <materialDesign:ColorZone
               Margin="16,0,0,0"
               Padding="8,4,8,4"
               materialDesign:ShadowAssist.ShadowDepth="Depth1"
               CornerRadius="2">
               <StackPanel Orientation="Horizontal">
                  <Button
                     Width="Auto"
                     Padding="8,2"
                     Style="{StaticResource MaterialDesignRaisedButton}">
                     <materialDesign:PackIcon
                        Width="24"
                        Height="24"
                        Kind="FolderOpen" />
                     <behaviors:Interaction.Triggers>
                        <behaviors:EventTrigger EventName="Click">
                           <l:FolderBrowserDialogInteractionMessageAction>
                              <l:DirectInteractionMessage CallbackCommand="{Binding FileLoadPathCommand, Mode=OneTime}">
                                 <l:FolderSelectionMessage
                                    Description="Select Target Folder"
                                    DialogPreference="None"
                                    SelectedPath="{Binding SettingVM.Value.SearchFilePath.Value}" />
                              </l:DirectInteractionMessage>
                           </l:FolderBrowserDialogInteractionMessageAction>
                        </behaviors:EventTrigger>
                     </behaviors:Interaction.Triggers>
                  </Button>
                  <TextBox
                     MinWidth="250"
                     Margin="5,0"
                     FontSize="16"
                     Text="{Binding SettingVM.Value.SearchFilePath.Value}" />
               </StackPanel>
            </materialDesign:ColorZone>
            <Button Margin="5,0" Command="{Binding FileLoadCommand, Mode=OneTime}">
               <StackPanel Orientation="Horizontal">
                  <materialDesign:PackIcon Kind="FolderRefreshOutline" />
                  <TextBlock Margin="5,0" Text="Load Files" />
               </StackPanel>
            </Button>
            <Button
               Margin="5,0"
               Command="{Binding ReplaceCommand, Mode=OneTime}"
               Style="{StaticResource MaterialDesignRaisedAccentButton}">
               <StackPanel Orientation="Horizontal">
                  <materialDesign:PackIcon Kind="RenameBox" />
                  <TextBlock Margin="5,0" Text="Dry Run" />
               </StackPanel>
            </Button>
            <Button
               Margin="5,0"
               Command="{Binding RenameExcuteCommand, Mode=OneTime}"
               Style="{StaticResource MaterialDesignRaisedAccentButton}">
               <StackPanel Orientation="Horizontal">
                  <materialDesign:PackIcon Kind="ContentSaveAllOutline" />
                  <TextBlock Margin="5,0" Text="Save" />
               </StackPanel>
            </Button>
         </StackPanel>
      </materialDesign:ColorZone>
      <DataGrid
         Grid.Row="1"
         Grid.Column="1"
         Margin="10"
         materialDesign:DataGridAssist.CellPadding="4 2 2 2"
         materialDesign:DataGridAssist.ColumnHeaderPadding="4 2 2 2"
         AutoGenerateColumns="False"
         EnableRowVirtualization="True"
         ItemsSource="{Binding FileElemenVMs.Value, Mode=OneWay}">
         <DataGrid.Columns>
            <DataGridTemplateColumn Width="400" Header="Input">
               <DataGridTemplateColumn.CellTemplate>
                  <DataTemplate>
                     <RichTextBox v:RichTextBoxHelper.Document="{Binding Diff.Value.OldText, Converter={StaticResource DiffPaneModelToFlowDocumentConverter}}" />
                  </DataTemplate>
               </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn Width="400" Header="Output">
               <DataGridTemplateColumn.CellTemplate>
                  <DataTemplate>
                     <RichTextBox v:RichTextBoxHelper.Document="{Binding Diff.Value.NewText, Converter={StaticResource DiffPaneModelToFlowDocumentConverter}}" />
                  </DataTemplate>
               </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn>
               <DataGridTemplateColumn.CellTemplate>
                  <DataTemplate>
                     <materialDesign:PackIcon
                        VerticalAlignment="Center"
                        Kind="CheckBold"
                        Visibility="{Binding IsReplaced.Value, Converter={StaticResource VisibilityCollapsedConverter}}" />
                  </DataTemplate>
               </DataGridTemplateColumn.CellTemplate>
               <DataGridTemplateColumn.Header>
                  <materialDesign:Badged
                     Margin="1,8,1,1"
                     Padding="0,0,8,0"
                     BadgeColorZoneMode="PrimaryMid">
                     <materialDesign:Badged.Badge>
                        <TextBlock Text="{Binding DataContext.CountReplaced.Value, ElementName=rootObj}" />
                     </materialDesign:Badged.Badge>
                     <CheckBox IsChecked="{Binding DataContext.IsVisibleReplacedOnly.Value, ElementName=rootObj}">
                        <StackPanel Orientation="Horizontal">
                           <materialDesign:PackIcon Kind="Filter" />
                           <TextBlock Text="Changed" />
                        </StackPanel>
                     </CheckBox>
                  </materialDesign:Badged>
               </DataGridTemplateColumn.Header>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn>
               <DataGridTemplateColumn.CellTemplate>
                  <DataTemplate>
                     <materialDesign:PackIcon
                        VerticalAlignment="Center"
                        Foreground="{StaticResource ValidationErrorBrush}"
                        Kind="FolderAlert"
                        Visibility="{Binding IsConflicted.Value, Converter={StaticResource VisibilityCollapsedConverter}}" />
                  </DataTemplate>
               </DataGridTemplateColumn.CellTemplate>
               <DataGridTemplateColumn.Header>
                  <materialDesign:Badged
                     Margin="1,8,1,1"
                     Padding="0,0,8,0"
                     BadgeColorZoneMode="PrimaryMid">
                     <materialDesign:Badged.Badge>
                        <TextBlock Text="{Binding DataContext.CountConflicted.Value, ElementName=rootObj}" />
                     </materialDesign:Badged.Badge>
                     <CheckBox IsChecked="{Binding DataContext.IsVisibleConflictedOnly.Value, ElementName=rootObj}">
                        <StackPanel Orientation="Horizontal">
                           <materialDesign:PackIcon Kind="Filter" />
                           <TextBlock Text="Conflicted" />
                        </StackPanel>
                     </CheckBox>
                  </materialDesign:Badged>
               </DataGridTemplateColumn.Header>
            </DataGridTemplateColumn>
            <DataGridTextColumn
               Width="120"
               Binding="{Binding DirectoryPath, Mode=OneTime}"
               Header="Directory"
               IsReadOnly="True" />
            <DataGridTextColumn
               Width="50"
               Binding="{Binding LengthByte, Mode=OneTime}"
               Header="Size"
               IsReadOnly="True" />
            <DataGridTextColumn
               Width="80"
               Binding="{Binding LastWriteTime, Mode=OneTime}"
               Header="Last Write Time"
               IsReadOnly="True" />
            <DataGridTextColumn
               Width="80"
               Binding="{Binding CreationTime, Mode=OneTime}"
               Header="Creation Time"
               IsReadOnly="True" />
         </DataGrid.Columns>
      </DataGrid>
      <Expander
         Grid.Row="1"
         Grid.Column="0"
         ExpandDirection="Left"
         IsExpanded="True">
         <Expander.Header>
            <TextBlock Text="Setting Replace">
               <TextBlock.LayoutTransform>
                  <RotateTransform Angle="90" />
               </TextBlock.LayoutTransform>
            </TextBlock>
         </Expander.Header>
         <ScrollViewer IsEnabled="{Binding IsIdle.Value}">
            <v:SettingApp DataContext="{Binding SettingVM.Value}" />
         </ScrollViewer>
      </Expander>
   </Grid>
</metro:MetroWindow>